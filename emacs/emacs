;; Required packages:
;;
;; magit
;; solarized-theme
;; flx-ido
;; auto-complete
;; paredit
;; expand-region
;; browse-kill-ring
;; avy
;; multiple-cursors
;; highlight-symbol
;;
;; Javascript Environment
;; Flycheck
;; js2-mode
;; ac-js2
;; yasnipet
;; company
;; company-tern
;; tern
;; tern-autocomplete


;; Packages lists
(require 'package)
(package-initialize)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)


;; Keybindings
(global-set-key (kbd "M-k") 'next-line)
(global-set-key (kbd "M-i") 'previous-line)
(global-set-key (kbd "M-l") 'forward-char)
(global-set-key (kbd "M-j") 'backward-char)

(global-set-key (kbd "C-o") 'er/expand-region)
(global-set-key (kbd "C-c SPC") 'avy-goto-char)
(global-set-key (kbd "C-c b") 'browse-kill-ring)

(global-set-key (kbd "M-/") 'auto-complete)

(global-set-key (kbd "C-S-c m") 'magit-status)

(global-set-key (kbd "C-.") 'tern-find-definition)


;; Multiple cursors
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)


;; Text settings
(delete-selection-mode t)
(blink-cursor-mode 0)
(show-paren-mode t)
(setq x-select-enable-clipboard t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)


;; Settings
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
(setq ido-use-faces nil)
(electric-indent-mode t)
(global-auto-revert-mode t)


;; Naked emacs
(setq initial-scratch-message "")
(setq inhibit-startup-message t)
(setq visible-bell t)
(setq inhibit-startup-echo-area-message "luladjiev")
(global-visual-line-mode t)
(when (window-system)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (menu-bar-mode 0))


;; Variables
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq inhibit-startup-message t)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(fset 'yes-or-no-p 'y-or-n-p)


;; Javascript
(add-to-list 'auto-mode-alist '("\\.json$" . js-mode))
(setq js-indent-level 2)
(setq js2-highlight-level 3)
(add-hook 'js-mode-hook 'js2-minor-mode)
(add-hook 'js-mode-hook 'ac-js2-mode)
(add-hook 'js-mode-hook 'highlight-symbol-mode)
;; Flycheck
(require 'flycheck)
(add-hook 'js-mode-hook 'flycheck-mode)
(setq flycheck-jshintrc "~/Projects/ui-dashboard/.jshintrc")
(add-hook 'js-mode-hook 'tern-mode)
(eval-after-load 'tern
  '(progn
     (setq tern-command (append tern-command '("--no-port-file")))
     (require 'tern-auto-complete)
     (tern-ac-setup)))

;; Paredit
(defun my-paredit-nonlisp ()
  "Turn on paredit mode for non-lisps."
  (interactive)
  (set (make-local-variable 'paredit-space-for-delimiter-predicates)
       '((lambda (endp delimiter) nil)))
  (paredit-mode 1))
(add-hook 'js-mode-hook 'my-paredit-nonlisp)


;; Yasnippet
(require 'yasnippet)
(yas-global-mode 1)


;; Auto complete
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
(ac-set-trigger-key "TAB")
(ac-set-trigger-key "<tab>")

;; Custom functionalities
(defun select-current-line ()
  "Selects the current line"
  (interactive)
  (end-of-line)
  (push-mark (line-beginning-position) nil t))

(global-set-key (kbd "M-o") 'select-current-line)

(defun line-above ()
  "Pastes line above"
  (interactive)
  (move-beginning-of-line nil)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key (kbd "M-RET") 'line-above)

(defun duplicate-current-line-or-region (arg)
  "Duplicates the current line or region ARG times.
If there's no region, the current line will be duplicated. However, if
there's a region, all lines that region covers will be duplicated."
  (interactive "p")
  (let (beg end (origin (point)))
    (if (and mark-active (> (point) (mark)))
        (exchange-point-and-mark))
    (setq beg (line-beginning-position))
    (if mark-active
        (exchange-point-and-mark))
    (setq end (line-end-position))
    (let ((region (buffer-substring-no-properties beg end)))
      (dotimes (i arg)
        (goto-char end)
        (newline)
        (insert region)
        (setq end (point)))
      (goto-char (+ origin (* (length region) arg) arg)))))

(global-set-key (kbd "C-c d") 'duplicate-current-line-or-region)

(defun remove-dos-eol ()
  "Do not show ^M in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))

(add-hook 'js-mode-hook 'remove-dos-eol)

(load-theme 'solarized-dark t)
